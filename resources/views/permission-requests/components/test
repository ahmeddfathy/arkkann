
@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // دالة تحديث التايمر
        function startCountdown(element) {
            const returnTime = new Date(element.dataset.returnTime).getTime();
            const shiftEndTime = new Date(element.dataset.shiftEndTime).getTime();
            let timerLabel = element.querySelector('.timer-label');

            function updateTimer() {
                const now = new Date().getTime();
                const distance = returnTime - now;

                // إذا تخطى وقت العودة، نعرض الوقت الإضافي المستهلك
                if (distance < 0) {
                    // تغيير النص من "الوقت المتبقي" إلى "متأخر بـ"
                    timerLabel.textContent = "متأخر بـ";
                    element.classList.add('danger');

                    // حساب الوقت المتأخر مع مراعاة أن نهاية الوردية هي الحد الأقصى
                    let overtime;

                    // إذا كان الوقت الحالي تجاوز نهاية الوردية، نستخدم الفرق بين وقت العودة ونهاية الوردية
                    if (now > shiftEndTime) {
                        overtime = shiftEndTime - returnTime;
                    } else {
                        overtime = now - returnTime;
                    }

                    // نتأكد من أن overtime لا يكون سالباً
                    overtime = Math.max(0, overtime);

                    const hours = Math.floor((overtime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    const minutes = Math.floor((overtime % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((overtime % (1000 * 60)) / 1000);

                    let timeDisplay = '';
                    if (hours > 0) {
                        timeDisplay += `${hours}:`;
                    }
                    timeDisplay += `${minutes < 10 && hours > 0 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

                    element.querySelector('.timer-value').innerHTML = timeDisplay;

                    return true; // استمر في تحديث العداد
                }

                // وقت العودة لم ينته بعد - عرض الوقت المتبقي
                timerLabel.textContent = "الوقت المتبقي";
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                // تحديث شكل التايمر حسب الوقت المتبقي
                element.classList.remove('warning', 'danger');
                if (minutes < 5) {
                    element.classList.add('danger');
                } else if (minutes < 10) {
                    element.classList.add('warning');
                }

                let timeDisplay = '';
                if (hours > 0) {
                    timeDisplay += `${hours}:`;
                }
                timeDisplay += `${minutes < 10 && hours > 0 ? '0' : ''}${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;

                element.querySelector('.timer-value').innerHTML = timeDisplay;
                return true;
            }

            // تحديث التايمر كل ثانية
            if (updateTimer()) {
                return setInterval(updateTimer, 1000);
            }
        }

        // تهيئة كل التايمرات
        const timers = [];
        console.log("محاولة تهيئة العدادات، عدد العناصر:", document.querySelectorAll('.countdown').length);
        document.querySelectorAll('.countdown').forEach(element => {
            const returnTime = new Date(element.dataset.returnTime);
            const now = new Date();
            console.log("معلومات العداد:", {
                elementExists: !!element,
                returnTime: element.dataset.returnTime,
                parsedReturnTime: returnTime,
                currentTime: now,
                hasDiffInDays: returnTime.toDateString() !== now.toDateString(),
                timerLabelExists: !!element.querySelector('.timer-label'),
                timerValueExists: !!element.querySelector('.timer-value')
            });

            // دائماً نبدأ العداد بغض النظر عن اليوم
            const timer = startCountdown(element);
            if (timer) {
                timers.push(timer);
                console.log("تمت إضافة المؤقت بنجاح");
            } else {
                console.log("فشل إضافة المؤقت");
            }
        });

        // معالجة أزرار العودة
        document.querySelectorAll('.return-btn, .reset-btn').forEach(button => {
            button.addEventListener('click', function() {
                const requestId = this.dataset.requestId;
                const status = this.dataset.status;

                // إضافة تأكيد فقط لزر "لم يرجع"
                if (status === '2' && !confirm('هل أنت متأكد من تسجيل عدم عودة الموظف؟')) {
                    return;
                }

                fetch(`/permission-requests/${requestId}/return-status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                    },
                    body: JSON.stringify({ return_status: status })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert(data.message || 'حدث خطأ أثناء تحديث حالة العودة');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('حدث خطأ أثناء تحديث حالة العودة');
                });
            });
        });

        // تنظيف التايمرات عند مغادرة الصفحة
        window.addEventListener('beforeunload', () => {
            timers.forEach(timer => clearInterval(timer));
        });

        // معالجة تبديل نوع الطلب (لنفسي/لموظف آخر)
        const registrationTypeInputs = document.querySelectorAll('input[name="registration_type"]');
        const employeeSelectContainer = document.getElementById('employee_select_container');
        const userIdSelect = document.getElementById('user_id');

        if (registrationTypeInputs && employeeSelectContainer) {
            registrationTypeInputs.forEach(input => {
                input.addEventListener('change', function() {
                    if (this.value === 'other') {
                        employeeSelectContainer.style.display = 'block';
                        if (userIdSelect) {
                            userIdSelect.required = true;
                        }
                    } else {
                        employeeSelectContainer.style.display = 'none';
                        if (userIdSelect) {
                            userIdSelect.required = false;
                            userIdSelect.value = '';
                        }
                    }
                });
            });
        }

        // معالجة أزرار الرد (للمدير و HR)
        document.querySelectorAll('.respond-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const requestId = this.dataset.requestId;
                const responseType = this.dataset.responseType;
                const form = document.getElementById('respondForm');
                const responseTypeInput = document.getElementById('response_type');

                // تعيين نوع الرد (مدير أو HR)
                responseTypeInput.value = responseType;

                // تعيين عنوان النموذج بناءً على نوع الرد
                form.action = responseType === 'hr'
                    ? "{{ url('/permission-requests') }}/" + requestId + "/hr-status"
                    : "{{ url('/permission-requests') }}/" + requestId + "/manager-status";
            });
        });

        // معالجة أزرار التعديل
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function() {
                const requestId = this.dataset.id;
                const departureTime = this.dataset.departure;
                const returnTime = this.dataset.return;
                const reason = this.dataset.reason;

                // تعيين عنوان النموذج
                const form = document.getElementById('editPermissionForm');
                form.action = `/permission-requests/${requestId}`;

                // تعيين القيم في حقول النموذج
                document.getElementById('edit_departure_time').value = departureTime.replace(' ', 'T');
                document.getElementById('edit_return_time').value = returnTime.replace(' ', 'T');
                document.getElementById('edit_reason').value = reason;
            });
        });

        // معالجة أزرار تعديل الرد
        document.querySelectorAll('.modify-response-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const requestId = this.dataset.requestId;
                const responseType = this.dataset.responseType;
                const status = this.dataset.status;
                const reason = this.dataset.reason || '';

                const form = document.getElementById('modifyResponseForm');
                const responseTypeInput = document.getElementById('modify_response_type');
                const statusInput = document.getElementById('modify_status');
                const reasonInput = document.getElementById('modify_reason');

                // تعيين قيم النموذج
                responseTypeInput.value = responseType;
                statusInput.value = status;
                reasonInput.value = reason;

                // تعيين عنوان النموذج بناءً على نوع الرد
                form.action = `/permission-requests/${requestId}/${responseType === 'hr' ? 'modify-hr-status' : 'modify-manager-status'}`;

                // إظهار/إخفاء حقل سبب الرفض
                const reasonContainer = document.getElementById('modify_reason_container');
                reasonContainer.style.display = status === 'rejected' ? 'block' : 'none';
            });
        });

        // عند تغيير حالة الرد، يتم إظهار/إخفاء حقل سبب الرفض
        document.getElementById('response_status').addEventListener('change', function() {
            const reasonContainer = document.getElementById('rejection_reason_container');
            reasonContainer.style.display = this.value === 'rejected' ? 'block' : 'none';
        });

        document.getElementById('modify_status').addEventListener('change', function() {
            const reasonContainer = document.getElementById('modify_reason_container');
            reasonContainer.style.display = this.value === 'rejected' ? 'block' : 'none';
        });

        // دالة إعادة تعيين حالة الطلب
        window.resetStatus = function(requestId, type) {
            if (confirm('هل أنت متأكد من إعادة تعيين هذا الرد؟')) {
                // استخدام fetch API للتعامل مع الاستجابة JSON
                fetch("{{ url('/permission-requests') }}/" + requestId + "/reset-" + type + "-status", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content,
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        _token: document.querySelector('meta[name="csrf-token"]').content
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // إعادة تحميل الصفحة عند النجاح
                        window.location.reload();
                    } else {
                        // عرض رسالة الخطأ
                        alert(data.message || 'حدث خطأ أثناء إعادة تعيين الرد');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('حدث خطأ أثناء إعادة تعيين الرد');
                });
            }
        };
    });
</script>
@endpush



@push('scripts')
<script>


    // دالة للتحقق من طلبات الاستئذان وتسجيل عدم العودة تلقائيًا عند نهاية يوم العمل
    function checkEndOfDayRequests() {
        // الحصول على الوقت الحالي والتحقق ما إذا كان بعد نهاية يوم العمل (4:00 عصرًا)
        const now = new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes();

        // تجميع جميع طلبات الاستئذان المعتمدة التي لم يتم تسجيل العودة فيها
        const requestIds = [];
        $('.mark-not-returned').each(function() {
            requestIds.push($(this).data('request-id'));
        });

        if (requestIds.length > 0) {
            // التحقق من كل طلب استئذان وتسجيل عدم العودة تلقائيًا إذا كان الوقت بعد نهاية يوم العمل
            $.ajax({
                url: '{{ route('permission-requests.check-end-of-day') }}',
                type: 'POST',
                data: {
                    request_ids: requestIds,
                    _token: "{{ csrf_token() }}"
                },
                success: function(response) {
                    if (response.updated_requests && response.updated_requests.length > 0) {
                        // تحديث الصفحة إذا تم تسجيل عدم العودة لأي طلب
                        location.reload();
                    }
                }
            });
        }
    }

    $(document).ready(function() {
        $('.datatable').DataTable({
            "language": {
                "url": "//cdn.datatables.net/plug-ins/1.10.25/i18n/Arabic.json"
            }
        });

        $('.select2').select2({
            dir: "rtl"
        });

        // تشغيل دالة التحقق من نهاية يوم العمل عند تحميل الصفحة
        checkEndOfDayRequests();
    });
</script>
@endpush